name: CI - Build and test on change

on: [push]

# Based on https://github.com/actions/starter-workflows/blob/9342fc5f270d28c3123ef456c03071b39f6b48f7/ci/cmake.yml
# This will execute the steps one after the other - re-uses the same machine for all tasks
# For parallell run on multiple instances, split it into separate jobs at the section markers

jobs:
  build:

    # runs-on: ubuntu-latest
    runs-on: self-hosted

    # runs-on: ${{ matrix.os }}
    # strategy:
    #   matrix:
    #     os: [windows-latest, ubuntu-latest, macOS-latest]

    steps:

    - name: Platform details
      run: uname -a

    - name: Fetch the source code
      uses: actions/checkout@master

# Section: Debug build

    - name: Debug - Create directory for build output
      run: cmake -E make_directory ${{runner.workspace}}/build/debug

    - name: Debug - Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build/debug
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      env:
        BUILD_TYPE: Debug
        # Also ASAN could be used here

    - name: Debug - Build code
      working-directory: ${{runner.workspace}}/build/debug
      shell: bash
      run: cmake --build . --config $BUILD_TYPE
      env:
        BUILD_TYPE: Debug

    - name: Debug - Run unit test
      working-directory: ${{runner.workspace}}/build/debug
      shell: bash
      run: ctest -C Debug

# Section: Static analysis with Clang
# Will be skipped on Windows

    - name: Clang Analyze - Create directory for analyzer output
      if: runner.os != 'Windows'
      run: cmake -E make_directory ${{runner.workspace}}/build/canalyze

    - name: Clang Analyze - Configure CMake
      if: runner.os != 'Windows'
      shell: bash
      working-directory: ${{runner.workspace}}/build/canalyze
      run: >
        CC=$(which clang)
        CXX=$(which clang++)
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=Debug

    - name: Clang Analyze - Run analyzer
      if: runner.os != 'Windows'
      working-directory: ${{runner.workspace}}/build/canalyze
      shell: bash
      run: cmake --build . --config Debug -- clang-static

# Section: Release build

    - name: Release - Create directory for build output
      run: cmake -E make_directory ${{runner.workspace}}/build/release

    - name: Release - Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build/release
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=Release

    - name: Release - Build code
      working-directory: ${{runner.workspace}}/build/release
      shell: bash
      run: cmake --build . --config Release

    - name: Release - Run unit test
      working-directory: ${{runner.workspace}}/build/release
      shell: bash
      run: ctest -C Release
